variables:
  IMAGE_NAME: $CI_REGISTRY/[[__COMPANY__]]/[[__PROJECT_NAME__]]
stages:
  - build-image
  - deploy-server

before_script:
  - echo "Start CI tasks."

.pre-build:
  image: docker:latest
  stage: build-image
  tags:
    - front
  # DinD is required for building docker image inside docker container
  services:
    - name: docker.io/docker:19.03.11-dind
      alias: docker
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker version
    - >-
      docker build -t $IMAGE_NAME:$IMAGE_TAG
      --build-arg VUE_CONFIG_PRESET=VUE_CONFIG_PRESET
      --build-arg VUE_OTHER_SETTINGS=VUE_OTHER_SETTINGS
      --build-arg BACKEND_API_URL=$BACKEND_API_URL .
    - 'echo "Pushing image:$IMAGE_NAME:$IMAGE_TAG to the registry: $CI_REGISTRY"'
    - docker push $IMAGE_NAME:$IMAGE_TAG

### build image based on develop branch with 'dev' tag and dev API urls
build-dev-image:
  extends: .pre-build
  variables:
    IMAGE_TAG: dev
    VUE_CONFIG_PRESET     : $DEV_VUE_CONFIG_PRESET
    VUE_OTHER_SETTINGS    : $DEV_VUE_OTHER_SETTINGS
    BACKEND_API_URL       : $DEV_BACKEND_API_URL
  only:
    refs:
      - branches
    variables:
      - $CI_COMMIT_REF_NAME == "develop"

### build any branch manually
build-branch-image:
  extends: .pre-build
  variables:
    IMAGE_TAG: $CI_COMMIT_SHORT_SHA
    VUE_CONFIG_PRESET     : $DEV_VUE_CONFIG_PRESET
    VUE_OTHER_SETTINGS    : $DEV_VUE_OTHER_SETTINGS
    BACKEND_API_URL       : $DEV_BACKEND_API_URL
  only:
    refs:
      - branches
  except:
    variables:
      - $CI_COMMIT_REF_NAME == "develop"
    refs:
      - master
      - merge_requests
  when: manual

### automatically build image based on master branch with 'master' tag and master API urls
build-master-image:
  extends: .pre-build
  variables:
    IMAGE_TAG: master
    VUE_CONFIG_PRESET     : $MASTER_VUE_CONFIG_PRESET
    VUE_OTHER_SETTINGS    : $MASTER_VUE_OTHER_SETTINGS
    BACKEND_API_URL       : $MASTER_BACKEND_API_URL
  only:
    refs:
      - master

### automatically build image based on master branch with 'prod'  tag and prod API urls
build-prod-image:
  extends: .pre-build
  variables:
    IMAGE_TAG: prod
    VUE_CONFIG_PRESET     : $PROD_VUE_CONFIG_PRESET
    VUE_OTHER_SETTINGS    : $PROD_VUE_OTHER_SETTINGS
    BACKEND_API_URL       : $PROD_BACKEND_API_URL
  only:
    refs:
      - master

### deploy image on the server
.pre-server-deploy:
  tags:
    - front
  stage: deploy-server
  before_script:
    - 'which ssh-agent || ( apk add openssh-client)'

    ##
    ## Run ssh-agent (inside the build environment)
    ##

    - eval "$(ssh-agent -s)"

    ##
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    ##
    - echo "$KEY" | tr -d '\r' | ssh-add - > /dev/null

    ##
    ## Create the SSH directory and give it the right permissions
    ##
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $SERVER >> ~/.ssh/known_hosts
  script:
    - |
      find . ! -name . \
      -and ! -name .. \
      -and ! -name "docker-config" \
      -and ! -name "nginx.conf" \
      -and ! -name "docker-compose.yml" \
      -delete  && \
      mv docker-config/ config/ && \
      echo "$SSL_CERT" | tr -d  '\r' | tee ./config/cert.pem > /dev/null && \
      echo "$SSL_KEY" | tr -d  '\r' | tee ./config/privkey.pem > /dev/null
    - tar -czf - ../[[__PROJECT_NAME__]]-front | ssh -o "StrictHostKeyChecking=no" $USER@$SERVER 'tar xvzf -'
    - |
      ssh -o "StrictHostKeyChecking=no" $USER@$SERVER <<DEPLOY
      cd ~/[[__PROJECT_NAME__]]-front && \
      echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY && \
      export IMAGE_NAME=$IMAGE_NAME && \
      export IMAGE_TAG=$IMAGE_TAG && \
      docker-compose pull && \
      docker-compose up -d --force-recreate && \
      docker image prune -f
      DEPLOY

# deploy dev image
server-deploy-dev:
  extends: .pre-server-deploy
  only:
    refs:
      - develop
  variables:
    SERVER: $DEV_TARGET_SERVER
    USER: $DEPLOY_USER
    KEY: $SSH_PRIVATE_KEY
    SSL_CERT: $DEV_SSL_CERT
    SSL_KEY: $DEV_SSL_PRIVKEY
    ENV_FILE: $DEV_ENV_FILE
    IMAGE_TAG: $CI_COMMIT_REF_NAME

# deploy master image
server-deploy-master:
  extends: .pre-server-deploy
  only:
    refs:
      - master
  variables:
    SERVER: $PROD_TARGET_SERVER
    USER: $DEPLOY_USER
    KEY: $SSH_PRIVATE_KEY
    SSL_CERT: $PROD_SSL_CERT
    SSL_KEY: $PROD_SSL_PRIVKEY
    ENV_FILE: $PROD_ENV_FILE
    IMAGE_TAG: master
  when: manual

after_script:
  - echo "CI tasks finished."
